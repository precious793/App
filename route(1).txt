import { type NextRequest, NextResponse } from "next/server"

// Server-side scraping endpoint to avoid CORS issues
export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const symbol = searchParams.get("symbol")

  if (!symbol) {
    return NextResponse.json({ error: "Symbol is required" }, { status: 400 })
  }

  try {
    // Try Yahoo Finance API endpoint
    const response = await fetch(`https://query1.finance.yahoo.com/v8/finance/chart/${symbol}?interval=1d&range=1d`, {
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        Accept: "application/json",
        "Accept-Language": "en-US,en;q=0.9",
        "Cache-Control": "no-cache",
      },
      next: { revalidate: 30 }, // Cache for 30 seconds
    })

    if (!response.ok) {
      throw new Error(`Yahoo Finance API error: ${response.status}`)
    }

    const data = await response.json()
    const result = data.chart?.result?.[0]

    if (!result) {
      throw new Error("No data in Yahoo Finance response")
    }

    const meta = result.meta
    const quote = result.indicators?.quote?.[0]

    if (!meta) {
      throw new Error("Invalid data structure from Yahoo Finance")
    }

    const currentPrice = meta.regularMarketPrice || meta.previousClose || 0
    const previousClose = meta.previousClose || meta.chartPreviousClose || currentPrice
    const change = currentPrice - previousClose
    const changePercent = previousClose !== 0 ? (change / previousClose) * 100 : 0

    const asset = {
      symbol: meta.symbol || symbol,
      name: meta.longName || meta.shortName || symbol,
      price: currentPrice,
      change: change,
      changePercent: changePercent,
      volume: meta.regularMarketVolume || 0,
      high: meta.regularMarketDayHigh || currentPrice,
      low: meta.regularMarketDayLow || currentPrice,
      open: meta.regularMarketOpen || currentPrice,
      marketCap: meta.marketCap,
      exchange: meta.exchangeName || meta.fullExchangeName || "Unknown",
      currency: meta.currency || "USD",
      timestamp: Date.now(),
      source: "Yahoo Finance",
    }

    return NextResponse.json(asset)
  } catch (error) {
    console.error(`Server-side scraping error for ${symbol}:`, error)

    // Return fallback data instead of error
    const fallbackAsset = generateFallbackData(symbol)
    return NextResponse.json(fallbackAsset)
  }
}

function generateFallbackData(symbol: string) {
  const basePrice = getRealisticPrice(symbol)
  const change = (Math.random() - 0.5) * 0.05 * basePrice
  const changePercent = (change / basePrice) * 100

  return {
    symbol: symbol,
    name: getAssetName(symbol),
    price: basePrice + change,
    change: change,
    changePercent: changePercent,
    volume: Math.floor(Math.random() * 10000000) + 100000,
    high: (basePrice + change) * 1.02,
    low: (basePrice + change) * 0.98,
    open: basePrice,
    exchange: getExchange(symbol),
    currency: getCurrency(symbol),
    timestamp: Date.now(),
    source: "Simulated Data",
  }
}

function getRealisticPrice(symbol: string): number {
  const prices: Record<string, number> = {
    // US Stocks
    AAPL: 175.5 + (Math.random() - 0.5) * 20,
    MSFT: 378.85 + (Math.random() - 0.5) * 40,
    GOOGL: 138.75 + (Math.random() - 0.5) * 15,
    AMZN: 153.4 + (Math.random() - 0.5) * 20,
    TSLA: 248.5 + (Math.random() - 0.5) * 30,
    NVDA: 478.5 + (Math.random() - 0.5) * 50,
    META: 325.75 + (Math.random() - 0.5) * 35,
    NFLX: 445.25 + (Math.random() - 0.5) * 45,
    JPM: 148.75 + (Math.random() - 0.5) * 15,
    V: 245.8 + (Math.random() - 0.5) * 25,
    JNJ: 162.5 + (Math.random() - 0.5) * 15,
    WMT: 158.3 + (Math.random() - 0.5) * 15,
    PG: 155.2 + (Math.random() - 0.5) * 15,
    UNH: 542.8 + (Math.random() - 0.5) * 50,
    HD: 345.6 + (Math.random() - 0.5) * 35,

    // Forex
    "EURUSD=X": 1.085 + (Math.random() - 0.5) * 0.02,
    "GBPUSD=X": 1.265 + (Math.random() - 0.5) * 0.03,
    "USDJPY=X": 149.5 + (Math.random() - 0.5) * 2,
    "USDCHF=X": 0.895 + (Math.random() - 0.5) * 0.02,
    "AUDUSD=X": 0.675 + (Math.random() - 0.5) * 0.02,
    "USDCAD=X": 1.365 + (Math.random() - 0.5) * 0.03,

    // Crypto
    "BTC-USD": 43500 + (Math.random() - 0.5) * 2000,
    "ETH-USD": 2650 + (Math.random() - 0.5) * 200,
    "BNB-USD": 315 + (Math.random() - 0.5) * 30,
    "XRP-USD": 0.63 + (Math.random() - 0.5) * 0.05,
    "ADA-USD": 0.52 + (Math.random() - 0.5) * 0.05,
    "SOL-USD": 98 + (Math.random() - 0.5) * 10,

    // Commodities
    "GC=F": 2050 + (Math.random() - 0.5) * 50,
    "SI=F": 24.5 + (Math.random() - 0.5) * 2,
    "CL=F": 78.5 + (Math.random() - 0.5) * 5,
    "NG=F": 2.85 + (Math.random() - 0.5) * 0.3,

    // Indices
    "^GSPC": 4750 + (Math.random() - 0.5) * 100,
    "^DJI": 37500 + (Math.random() - 0.5) * 500,
    "^IXIC": 14800 + (Math.random() - 0.5) * 300,
    "^VIX": 18.5 + (Math.random() - 0.5) * 3,
  }

  return prices[symbol] || Math.random() * 500 + 50
}

function getAssetName(symbol: string): string {
  const names: Record<string, string> = {
    AAPL: "Apple Inc.",
    MSFT: "Microsoft Corp.",
    GOOGL: "Alphabet Inc.",
    AMZN: "Amazon.com Inc.",
    TSLA: "Tesla Inc.",
    NVDA: "NVIDIA Corp.",
    META: "Meta Platforms Inc.",
    NFLX: "Netflix Inc.",
    JPM: "JPMorgan Chase & Co.",
    V: "Visa Inc.",
    JNJ: "Johnson & Johnson",
    WMT: "Walmart Inc.",
    PG: "Procter & Gamble Co.",
    UNH: "UnitedHealth Group Inc.",
    HD: "Home Depot Inc.",

    "EURUSD=X": "Euro / US Dollar",
    "GBPUSD=X": "British Pound / US Dollar",
    "USDJPY=X": "US Dollar / Japanese Yen",
    "USDCHF=X": "US Dollar / Swiss Franc",
    "AUDUSD=X": "Australian Dollar / US Dollar",
    "USDCAD=X": "US Dollar / Canadian Dollar",

    "BTC-USD": "Bitcoin",
    "ETH-USD": "Ethereum",
    "BNB-USD": "Binance Coin",
    "XRP-USD": "Ripple",
    "ADA-USD": "Cardano",
    "SOL-USD": "Solana",

    "GC=F": "Gold Futures",
    "SI=F": "Silver Futures",
    "CL=F": "Crude Oil Futures",
    "NG=F": "Natural Gas Futures",

    "^GSPC": "S&P 500",
    "^DJI": "Dow Jones Industrial Average",
    "^IXIC": "NASDAQ Composite",
    "^VIX": "CBOE Volatility Index",
  }

  return names[symbol] || symbol
}

function getExchange(symbol: string): string {
  if (symbol.includes("=X")) return "Forex Market"
  if (symbol.includes("-USD")) return "Global Crypto"
  if (symbol.includes("=F")) return "Futures Market"
  if (symbol.startsWith("^")) return "Index Market"
  return "NASDAQ"
}

function getCurrency(symbol: string): string {
  if (symbol.includes("JPY")) return "JPY"
  if (symbol.includes("EUR")) return "EUR"
  if (symbol.includes("GBP")) return "GBP"
  if (symbol.includes("CHF")) return "CHF"
  if (symbol.includes("AUD")) return "AUD"
  if (symbol.includes("CAD")) return "CAD"
  return "USD"
}
